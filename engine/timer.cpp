//=============================================================================
// マルチスレッド対応 演奏時間管理
//=============================================================================

#define WIN32_LEAN_AND_MEAN
#pragma warning(disable: 4201)	//非標準の拡張機能が使用されています : 無名の構造体または共用体です。

#include <windows.h>
#include <mmsystem.h>
#include "lib/wx_misc.h"
#include "timer.h"

UINT Timer::m_period = 1;

//-----------------------------------------------------------------------------
// 初期化
//-----------------------------------------------------------------------------
void Timer::Initialize()
{
	TIMECAPS tc;

	// マルチメディアタイマーの限界分解能を取得
	if (timeGetDevCaps(&tc, sizeof(tc)) == TIMERR_NOERROR) {
		m_period = tc.wPeriodMin;
	}

	timeBeginPeriod(m_period);
	WX_TRACE("Timer::Initialize() period = %d\n", m_period);
}

//-----------------------------------------------------------------------------
// 破棄
//-----------------------------------------------------------------------------
void Timer::Finalize()
{
	timeEndPeriod(m_period);
	WX_TRACE("Timer::Finalize() period = %d\n", m_period);
}

//-----------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------
Timer::Timer()
	: m_std_time(0)
	, m_cur_time(0)
{
}

//-----------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------
Timer::~Timer()
{
}

//-----------------------------------------------------------------------------
// タイマーを起動する
//-----------------------------------------------------------------------------
void Timer::Start()
{
	WX_TRACE("Timer::Start()\n");
	m_std_time = timeGetTime();
	m_cur_time = 0;
}

//-----------------------------------------------------------------------------
// タイマーを止める
//-----------------------------------------------------------------------------
void Timer::Stop()
{
	WX_TRACE("Timer::Stop()\n");
	m_std_time = 0;
	m_cur_time = 0;
}

//-----------------------------------------------------------------------------
// タイマーを一時停止する
//-----------------------------------------------------------------------------
void Timer::Suspend()
{
	WX_TRACE("Timer::Suspend()\n");
	m_cur_time = timeGetTime() - m_std_time;
	m_std_time = 0;
}

//-----------------------------------------------------------------------------
// タイマーを再開する
//-----------------------------------------------------------------------------
void Timer::Resume()
{
	WX_TRACE("Timer::Resume()\n");
	m_std_time = timeGetTime() - m_cur_time;
	m_cur_time = 0;
}

//-----------------------------------------------------------------------------
// 指定された時間に設定する
//-----------------------------------------------------------------------------
void Timer::SetTime(UINT time_ms)
{
	m_std_time = timeGetTime() - time_ms;
	m_cur_time = 0;
}

//-----------------------------------------------------------------------------
// 現在の時間を取得する
//-----------------------------------------------------------------------------
UINT Timer::GetTime()  const
{
	return (m_std_time > 0)? (timeGetTime() - m_std_time) : m_cur_time;
}
