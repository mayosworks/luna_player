//=============================================================================
// Auxiliary library for Windows API (C++)
//                                                     Copyright (c) 2007 MAYO.
//=============================================================================
#pragma once

namespace wx {

//-----------------------------------------------------------------------------
//! @class	String
//! @brief	UNICODE文字列
//-----------------------------------------------------------------------------
class String
{
public:
	//-------------------------------------------------------------------------
	//! @brief	デフォルトコンストラクタ
	//-------------------------------------------------------------------------
	String();
	
	//-------------------------------------------------------------------------
	//! @brief	Unicode文字列コンストラクタ
	//!
	//! @param	str			セットするUnicode文字列
	//! @param	len			セットする最大文字数
	//-------------------------------------------------------------------------
	String(const wchar_t* str, int len = -1);

	//-------------------------------------------------------------------------
	//! @brief	Shift_JIS文字列指定コンストラクタ
	//!
	//! @param	str			セットするShift_JIS文字列
	//! @param	len			セットする最大文字数
	//-------------------------------------------------------------------------
	String(const char* str, int len = -1);

	//-------------------------------------------------------------------------
	//! @brief	コピーコンストラクタ
	//!
	//! @param	obj			セットする文字列オブジェクト
	//-------------------------------------------------------------------------
	explicit String(const String& obj);

	//-------------------------------------------------------------------------
	//! @brief	デストラクタ
	//-------------------------------------------------------------------------
	~String();

	//-------------------------------------------------------------------------
	//! @brief	文字列オブジェクトを代入する
	//!
	//! @param	str			代入する文字列オブジェクト
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String& operator = (const String& str);

	//-------------------------------------------------------------------------
	//! @brief	文字列を代入する
	//!
	//! @param	str			代入する文字列
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String& operator = (const wchar_t* str);

	//-------------------------------------------------------------------------
	//! @brief	文字列オブジェクトを追加する
	//!
	//! @param	obj			追加する文字列オブジェクト
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String& operator += (const String& obj);

	//-------------------------------------------------------------------------
	//! @brief	文字列を追加する
	//!
	//! @param	str			追加する文字列
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String& operator += (const wchar_t* str);

	//-------------------------------------------------------------------------
	//! @brief	文字列オブジェクトを結合する
	//!
	//! @param	obj			結合する文字列オブジェクト
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String operator + (const String& obj) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列を結合する
	//!
	//! @param	str			結合する文字列
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String operator + (const wchar_t* str) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列が同じかを比較する
	//!
	//! @param	str			比較する文字列
	//!
	//! @retval	true		等しい
	//! @retval	false		等しくない
	//-------------------------------------------------------------------------
	bool operator == (const wchar_t* str) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列が同じでないかを比較する
	//!
	//! @param	str			比較する文字列
	//!
	//! @retval	true		等しくない
	//! @retval	false		等しい
	//-------------------------------------------------------------------------
	bool operator != (const wchar_t* str) const;

	//-------------------------------------------------------------------------
	//! @brief	この文字列が指定の文字列に比べ、大きいかを比較する
	//!
	//! @param	str			比較する文字列
	//!
	//! @retval	true		小さい
	//! @retval	false		大きい
	//-------------------------------------------------------------------------
	bool operator > (const wchar_t* str) const;

	//-------------------------------------------------------------------------
	//! @brief	この文字列が指定の文字列に比べ、小さいかを比較する
	//!
	//! @param	str			比較する文字列
	//!
	//! @retval	true		小さい
	//! @retval	false		大きい
	//-------------------------------------------------------------------------
	bool operator < (const wchar_t* str) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列へのポインタを取得する(operator)
	//!
	//! @return	文字列へのポインタ
	//-------------------------------------------------------------------------
	operator const wchar_t*() const { return m_string; }

	//-------------------------------------------------------------------------
	//! @brief	文字列へのポインタを取得する
	//!
	//! @return	文字列へのポインタ
	//-------------------------------------------------------------------------
	const wchar_t* Get() const { return m_string; }

	//-------------------------------------------------------------------------
	//! @brief	特定位置の文字へのリファレンスを取得する、範囲チェックなし
	//!
	//! @param	pos			文字の位置
	//!
	//! @return	文字へのリファレンス
	//-------------------------------------------------------------------------
	wchar_t& operator [](int pos);

	//-------------------------------------------------------------------------
	//! @brief	特定位置の文字を取得する、範囲チェックあり
	//!
	//! @param	pos			文字の位置
	//!
	//! @return	文字、範囲外の場合は'\0'
	//-------------------------------------------------------------------------
	wchar_t At(int pos) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列が有効かどうかを取得する
	//!
	//! @retval	true		文字列は有効
	//! @retval	false		文字列は無効
	//-------------------------------------------------------------------------
	bool IsValid() const;

	//-------------------------------------------------------------------------
	//! @brief	文字列の長さを取得する
	//!
	//! @return	文字列の長さ
	//-------------------------------------------------------------------------
	int Length() const { return m_length; }

	//-------------------------------------------------------------------------
	//! @brief	文字列が空かどうかを取得する
	//!
	//! @retval	true		文字なし、空
	//! @retval	false		文字あり
	//-------------------------------------------------------------------------
	bool IsEmpty() const;

	//-------------------------------------------------------------------------
	//! @brief	文字列クリア
	//-------------------------------------------------------------------------
	void Clear();

	//-------------------------------------------------------------------------
	//! @brief	文字列をフォーマットしてセットする（最大1023文字）
	//!
	//! @param	fmt			フォーマット
	//! @param	...			可変長引数
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String& Print(const wchar_t* fmt, ...);

	//-------------------------------------------------------------------------
	//! @brief	 文字列をフォーマットしてセットする（最大1023文字）
	//!
	//! @param	fmt			書き込む文字列フォーマット
	//! @param	ap			引数リスト
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String& VPrint(const wchar_t* fmt, va_list ap);

	//-------------------------------------------------------------------------
	//! @brief	文字列の一部を消す
	//!
	//! @param	start		削除開始位置
	//! @param	len			削除開始位置からの長さ
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String& Erase(int start, int len = -1);

	//-------------------------------------------------------------------------
	//! @brief	文字を検索する
	//!
	//! @param	cond		検索文字
	//! @param	start		検索開始位置
	//!
	//! @return	見つかった位置、見つからない場合はNPOS
	//-------------------------------------------------------------------------
	int Find(wchar_t cond, int start = 0) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列を検索する
	//!
	//! @param	cond		検索文字列
	//! @param	start		検索開始位置
	//!
	//! @return	見つかった位置、見つからない場合はNPOS
	//-------------------------------------------------------------------------
	int Find(const wchar_t* cond, int start = 0) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列を分割する
	//!
	//! @param	start		分割開始位置
	//! @param	len			分割開始位置からの長さ
	//!
	//! @return	分割した文字列オブジェクト
	//-------------------------------------------------------------------------
	String Substr(int start = 0, int len = -1) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列をトークン分解する
	//!
	//! @param	delim		区切り文字
	//! @param	start		トークン分解の開始位置
	//! @param	next		次のトークン位置
	//!
	//! @return	文字列オブジェクト
	//-------------------------------------------------------------------------
	String GetToken(wchar_t delim, int start, int& next);

	//-------------------------------------------------------------------------
	//! @brief	文字を置換する
	//!
	//! @param	cond		検索文字
	//! @param	ch			置換後の文字
	//!
	//! @return	置換した文字列オブジェクト
	//-------------------------------------------------------------------------
	String Replace(wchar_t cond, wchar_t ch) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列を置換する
	//!
	//! @param	cond		検索文字列
	//! @param	str			置換後の文字列
	//!
	//! @return	置換した文字列オブジェクト
	//-------------------------------------------------------------------------
	String Replace(const wchar_t* cond, const wchar_t* str) const;

	//-------------------------------------------------------------------------
	//! @brief	文字列を大文字化する
	//!
	//! @return	大文字を大文字に変換した文字列オブジェクト
	//-------------------------------------------------------------------------
	String ToUpper() const;

	//-------------------------------------------------------------------------
	//! @brief	文字列を小文字化する
	//!
	//! @return	大文字を小文字に変換した文字列オブジェクト
	//-------------------------------------------------------------------------
	String ToLower() const;

	//-------------------------------------------------------------------------
	//! @brief	文字列をトリミングする
	//!
	//! @return	トリミングした文字列オブジェクト
	//-------------------------------------------------------------------------
	String Trim() const;

public:
	static const int NPOS = -1;	///<無効な場所を示す値

private:
	static wchar_t* AllocString(int len);
	static void FreeString(wchar_t* str);

	void SetString(const wchar_t* str, int len = -1);
	void AddString(const wchar_t* str, int len = -1);

private:
	wchar_t*	m_string;
	int			m_length;
};

} //namespace wx
